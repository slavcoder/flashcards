{"version":3,"sources":["components/Modal/ModalReview.module.scss","components/Modal/ModalDeckDetails.module.scss","components/Modal/SelectDeck.module.scss","components/Modal/Modal.module.scss","components/Footer/Footer.module.scss","components/TestMode/TestMode.module.scss","components/Header/Header.module.scss","components/Table/Row.module.scss","App.module.scss","components/Table/Table.module.scss","components/Modal/Checkbox.module.scss","components/Modal/Input.module.scss","components/Modal/ModalNewCard.module.scss","components/Button/Button.module.scss","components/Modal/ButtonContainer.module.scss","components/Modal/DeleteConfirmForm.module.scss","components/Modal/InfoBar.module.scss","components/Modal/ModalNewDeck.module.scss","components/Modal/ModalAbout.module.scss","components/Header/Header.js","components/Button/Button.js","components/Table/Row.js","context.js","components/Table/Table.js","components/Modal/SelectDeck.js","components/Modal/ButtonContainer.js","components/Modal/ModalReview.js","components/Modal/InfoBar.js","components/Modal/Checkbox.js","components/Modal/DeleteConfirmForm.js","components/Modal/ModalDeckDetails.js","components/Modal/Input.js","components/Modal/ModalNewCard.js","components/Modal/ModalNewDeck.js","components/Modal/ModalAbout.js","components/Modal/Modal.js","components/Footer/Footer.js","components/TestMode/TestMode.js","data/modals.js","data/testData.js","data/data.js","App.js","index.js"],"names":["module","exports","Header","className","styles","header","heading","link","href","Button","type","children","props","Row","review","count","name","showDeckDetailsFn","reviewFn","nameButtonType","onClick","defaultProps","AppContext","React","createContext","Table","Consumer","context","table","card","filter","el","nextReviewInDays","nextReview","length","startReview","showDeckDetails","deck","map","index","deckCards","deckId","id","key","SelectDeck","showAll","labelText","deckArray","defaultValue","onChangeFn","htmlFor","label","select","onChange","required","option","value","disabled","deckItem","ButtonContainer","ModalReview","state","front","flipCard","setState","prevState","this","cardStack","selectContainer","e","newDeckId","Number","target","countCards","countText","countNumber","flipButton","buttonContainer","headingNeutral","back","_","handleCard","noCardsInfo","closeModal","Component","InfoBar","Checkbox","active","bool","checked","changeFn","checkbox","toggleActive","DeleteConfirmForm","cancelFn","confirmFn","cardsCount","onSubmit","preventDefault","ModalDeckDetails","showDeleteConfirmForm","scrollContainer","createRef","componentDidMount","showMore","setTableScroll","componentDidUpdate","current","scrollTop","days","getColor","text","classColor","getDeck","find","deleteDeck","setModal","modal","showModal","deckDescription","deckDescriptionTitle","deckDescriptionContent","description","countContainer","countTitle","tableContainer","ref","tableQuestionTitle","tableReviewTitle","item","tableQuestion","Input","ModalNewCard","reset","updateValue","resetForm","countNewCards","resetProgress","deleteCard","form","action","updateCard","createCard","placeholder","ModalNewDeck","deckName","createDeck","updateDeck","ModalAbout","aboutContainer","Modal","title","titleClass","includes","container","box","Footer","testMode","toggleTestModeFn","showAboutFn","footer","aboutButton","TestMode","testCardsFn","testDeckFn","bar","barButton","testModeInfoBox","modals","reviewModal","open","newCardModal","updateCardModal","newDeckModal","updateDeckModal","deckDetailsModal","aboutModal","testText","data","get","localStorage","getItem","JSON","parse","set","setItem","stringify","App","today","Date","toISOString","knowledgeLevel","saveChanges","cardsToLearn","forEach","hardCount","level","cardDeck","shift","push","Math","random","miliseconds","floor","max","getTime","cardNextReview","cardReviewDate","testCards","amount","newCards","startId","deckIdArr","deckIdArrLength","textArr","split","trim","textArrLength","n","i","year","month","day","testDeck","toggleTestMode","loadLastSave","contextElement","allModals","openModal","Provider","main","buttonsContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56ed2074.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectContainer\":\"ModalReview_selectContainer__U9usg\",\"countCards\":\"ModalReview_countCards__B5EPZ\",\"countText\":\"ModalReview_countText__JEq3T\",\"countNumber\":\"ModalReview_countNumber__Ls9-V\",\"heading\":\"ModalReview_heading__wY2wn\",\"headingNeutral\":\"ModalReview_headingNeutral__3fUSI\",\"flipButton\":\"ModalReview_flipButton__fzA-L\",\"front\":\"ModalReview_front__116Sa\",\"back\":\"ModalReview_back__1VeF6\",\"buttonContainer\":\"ModalReview_buttonContainer__3pLc7\",\"noCardsInfo\":\"ModalReview_noCardsInfo__1FJmu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectContainer\":\"ModalDeckDetails_selectContainer__1DgI2\",\"countContainer\":\"ModalDeckDetails_countContainer__2eP7u\",\"countTitle\":\"ModalDeckDetails_countTitle__12uEX\",\"count\":\"ModalDeckDetails_count__24zBT\",\"tableContainer\":\"ModalDeckDetails_tableContainer__2DP6-\",\"table\":\"ModalDeckDetails_table__3TCpo\",\"tableQuestionTitle\":\"ModalDeckDetails_tableQuestionTitle__3QWpO\",\"tableReviewTitle\":\"ModalDeckDetails_tableReviewTitle__1WSLT\",\"tableQuestion\":\"ModalDeckDetails_tableQuestion__jAQIE\",\"tableReview\":\"ModalDeckDetails_tableReview__IIpxM\",\"reviewPrimary\":\"ModalDeckDetails_reviewPrimary__2SuiU\",\"reviewPrimaryLight\":\"ModalDeckDetails_reviewPrimaryLight__3OHFS\",\"reviewPrimaryLighter\":\"ModalDeckDetails_reviewPrimaryLighter__3PHR9\",\"reviewPrimaryDeepLight\":\"ModalDeckDetails_reviewPrimaryDeepLight__1dGpI\",\"reviewPrimaryDeepLighter\":\"ModalDeckDetails_reviewPrimaryDeepLighter__15kue\",\"reviewNeutral\":\"ModalDeckDetails_reviewNeutral__1-m1A\",\"reviewNeutralLight\":\"ModalDeckDetails_reviewNeutralLight__eGTCT\",\"reviewNeutralLighter\":\"ModalDeckDetails_reviewNeutralLighter__3FTiC\",\"deckDescription\":\"ModalDeckDetails_deckDescription__34qU6\",\"deckDescriptionTitle\":\"ModalDeckDetails_deckDescriptionTitle__3irVr\",\"deckDescriptionName\":\"ModalDeckDetails_deckDescriptionName__29by0\",\"deckDescriptionContent\":\"ModalDeckDetails_deckDescriptionContent__2v4fM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SelectDeck_label__17BBx\",\"select\":\"SelectDeck_select__Etmp9\",\"option\":\"SelectDeck_option__2P4O_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3ZNt-\",\"slideIn\":\"Modal_slideIn__2YepX\",\"title\":\"Modal_title__3byaB\",\"titlePrimary\":\"Modal_titlePrimary__1U9XO\",\"titleSecondary\":\"Modal_titleSecondary__2Ssn5\",\"box\":\"Modal_box__19EXm\",\"container\":\"Modal_container__1oiCn\",\"fadeIn\":\"Modal_fadeIn__1m30j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3bYFT\",\"testButton\":\"Footer_testButton__3I-An\",\"testButtonActive\":\"Footer_testButtonActive__3BlEX\",\"link\":\"Footer_link__KtsgP\",\"aboutButton\":\"Footer_aboutButton__2fhw8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"TestMode_heading__3sCCZ\",\"testModeInfoBox\":\"TestMode_testModeInfoBox__2JXQr\",\"bar\":\"TestMode_bar__3cO8k\",\"barButton\":\"TestMode_barButton__EKzFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Vsf3\",\"goDown\":\"Header_goDown__mIPC_\",\"heading\":\"Header_heading__suwSu\",\"link\":\"Header_link__3pCy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learn\":\"Row_learn__3pBeX\",\"count\":\"Row_count__2W5A8\",\"name\":\"Row_name__iEtZl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1ytWG\",\"buttonsContainer\":\"App_buttonsContainer__1ZsJi\",\"modalBackground\":\"App_modalBackground__1UwyQ\",\"curtain\":\"App_curtain__161T3\",\"testModeInfo\":\"App_testModeInfo__25cQ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3BEhU\",\"name\":\"Table_name___uiya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__2ZgQa\",\"labelDanger\":\"Checkbox_labelDanger__3IF1Y\",\"checkbox\":\"Checkbox_checkbox__kDaQl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3eDns\",\"textarea\":\"Input_textarea__2hEuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectContainer\":\"ModalNewCard_selectContainer__ZjlYP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1IPep\",\"primary\":\"Button_primary__1N_HS\",\"primaryLight\":\"Button_primaryLight__QslLQ\",\"secondary\":\"Button_secondary__2VHnP\",\"secondaryLight\":\"Button_secondaryLight__eO94q\",\"danger\":\"Button_danger__1IOXW\",\"neutral\":\"Button_neutral__1hdsb\",\"neutralLight\":\"Button_neutralLight__3Zarr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonContainer\":\"ButtonContainer_buttonContainer__3s1Zs\",\"bottomSpace\":\"ButtonContainer_bottomSpace__3t-Sa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"DeleteConfirmForm_heading__3yGF6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"InfoBar_default__2ivve\",\"primary\":\"InfoBar_primary__3hy1V\",\"danger\":\"InfoBar_danger__3ACIA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectContainer\":\"ModalNewDeck_selectContainer__M8f72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutContainer\":\"ModalAbout_aboutContainer__gOupi\"};","import React from 'react'\r\nimport styles from './Header.module.scss'\r\n\r\nconst Header = () => (\r\n    <header className={styles.header}>\r\n        <h1 className={styles.heading}>\r\n            <a className={styles.link} href=\"/\">flashcards</a>\r\n        </h1>            \r\n    </header>\r\n)\r\n\r\nexport default Header","import React from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button = ({type, children, ...props}) => (\r\n    <button\r\n        className={styles[type]}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nButton.propTypes = {\r\n    type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport styles from \"./Row.module.scss\";\r\nimport Button from '../Button/Button'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Row = ({review, count, name, type, showDeckDetailsFn, reviewFn}) => {\r\n    const nameButtonType = type === 'userDeck' ? 'secondaryLight' : 'secondary'\r\n\r\n    return (\r\n        <tr>\r\n            <td className={styles.review}>\r\n            {review ? (\r\n                <Button\r\n                    type='primary'\r\n                    onClick={reviewFn}\r\n                >\r\n                    {review}\r\n                </Button>\r\n            ) : (\r\n                <span>{review}</span>\r\n            )}\r\n            </td>\r\n\r\n            <td className={styles.count}>\r\n                {count}\r\n            </td>\r\n            \r\n            <td className={styles.name}>\r\n                <Button\r\n                    type={nameButtonType}\r\n                    onClick={showDeckDetailsFn}\r\n                >\r\n                    {name}\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    review: PropTypes.number.isRequired,\r\n    count: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string,\r\n    showDeckDetailsFn: PropTypes.func.isRequired, \r\n    reviewFn: PropTypes.func.isRequired\r\n}\r\n\r\nRow.defaultProps = {\r\n    type: 'userDeck'\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nconst AppContext = React.createContext()\r\n\r\nexport default AppContext","import React from \"react\";\r\nimport styles from \"./Table.module.scss\";\r\nimport Row from './Row'\r\nimport AppContext from '../../context'\r\n\r\nconst Table = () => (\r\n    <AppContext.Consumer>\r\n        {context => (\r\n            <table className={styles.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>review</th>\r\n                        <th>count</th>\r\n                        <th className={styles.name}>deck name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <Row\r\n                        review={context.card.filter(el => context.nextReviewInDays(el.nextReview) <= 0).length}\r\n                        count={context.card.length}\r\n                        name='all'\r\n                        type='default'\r\n                        reviewFn={() => context.startReview(0)}\r\n                        showDeckDetailsFn={() => context.showDeckDetails(0)}\r\n                    />\r\n                    {context.deck.map((deck, index) => {\r\n                        const deckCards = context.card.filter(el => el.deckId === deck.id)\r\n\r\n                        return (\r\n                            <Row\r\n                                key={index}\r\n                                review={deckCards.filter(el => context.nextReviewInDays(el.nextReview) <= 0).length}\r\n                                count={deckCards.length}\r\n                                name={deck.name}\r\n                                reviewFn={() => context.startReview(deck.id)}\r\n                                showDeckDetailsFn={() => context.showDeckDetails(deck.id)}\r\n                            />\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        )}\r\n    </AppContext.Consumer>\r\n)\r\n\r\nexport default Table;\r\n","import React from 'react'\r\nimport styles from './SelectDeck.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst SelectDeck = ({showAll, labelText, deckArray, defaultValue, onChangeFn}) => (\r\n    <>\r\n        <label \r\n            htmlFor=\"deckName\"\r\n            className={styles.label}\r\n        >\r\n            {labelText}\r\n        </label>\r\n        <select \r\n            className={styles.select}\r\n            name=\"deckId\" \r\n            id=\"deckName\" \r\n            onChange={onChangeFn}\r\n            defaultValue={defaultValue}\r\n            required\r\n        >\r\n            {showAll ? (\r\n                <option \r\n                    className={styles.option} \r\n                    value={0}\r\n                >\r\n                    all\r\n                </option>\r\n            ) : (\r\n                <option \r\n                    className={styles.option}\r\n                    disabled \r\n                    value='select deck'\r\n                >\r\n                    - select deck -\r\n                </option>\r\n            )}\r\n\r\n            {deckArray.map((deckItem, index) => (\r\n                <option \r\n                    className={styles.option}\r\n                    key={index}\r\n                    value={deckItem.id}\r\n                >\r\n                    {deckItem.name}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    </>\r\n)\r\n\r\nSelectDeck.propTypes = {\r\n    showAll: PropTypes.bool,\r\n    labelText: PropTypes.string.isRequired,\r\n    deckArray: PropTypes.array.isRequired,\r\n    onChangeFn: PropTypes.func.isRequired,\r\n}\r\n\r\nSelectDeck.defaultProps = {\r\n    showAll: false,\r\n}\r\n\r\nexport default SelectDeck","import React from 'react'\r\nimport styles from './ButtonContainer.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ButtonContainer = ({children, type}) => (\r\n    <div className={styles[type]}>\r\n        {children}\r\n    </div>\r\n)\r\n\r\nButtonContainer.propTypes = {\r\n    type: PropTypes.string\r\n}\r\n\r\nButtonContainer.defaultProps = {\r\n    type: 'buttonContainer'\r\n}\r\n\r\nexport default ButtonContainer","import React from 'react';\r\nimport AppContext from '../../context'\r\nimport SelectDeck from './SelectDeck'\r\nimport ButtonContainer from './ButtonContainer'\r\nimport Button from '../Button/Button'\r\nimport styles from './ModalReview.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ModalReview extends React.Component {\r\n    state = {\r\n        front: true\r\n    }\r\n\r\n    flipCard = () => {\r\n        this.setState(prevState => ({\r\n            front: !prevState.front\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const { card, name, deckId } = this.props\r\n        const { front } = this.state\r\n        const cardStack = card\r\n\r\n        return (\r\n            <AppContext.Consumer>\r\n                {context => (\r\n                    <>\r\n                        <div className={styles.selectContainer}>\r\n                            <SelectDeck \r\n                                labelText='deck'\r\n                                deckArray={context.deck}\r\n                                defaultValue={deckId}\r\n                                showAll={true}\r\n                                onChangeFn={e => {\r\n                                    const newDeckId = Number(e.target.value) ? Number(e.target.value) : 0\r\n                                    context.startReview(newDeckId)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className={styles.countCards}>\r\n                            <span className={styles.countText}>left</span>\r\n                            <span className={styles.countNumber}>\r\n                                {cardStack.length}\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            {cardStack.length ? (\r\n                                <>\r\n                                    {front ? (\r\n                                        <>\r\n                                            <h2 className={styles.heading}>\r\n                                                - front -\r\n                                                <button \r\n                                                    className={styles.flipButton}\r\n                                                    onClick={this.flipCard}\r\n                                                >\r\n                                                    flip card\r\n                                                </button>\r\n                                            </h2>\r\n                                            <div className={styles.front}>\r\n                                                {cardStack[0].front}\r\n                                            </div>\r\n                                            <div className={styles.buttonContainer}>\r\n                                                <Button \r\n                                                    type='primary'\r\n                                                    onClick={this.flipCard}\r\n                                                >\r\n                                                    check\r\n                                                </Button>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <h2 className={styles.headingNeutral}>\r\n                                                - back -\r\n                                                <button \r\n                                                    className={styles.flipButton}\r\n                                                    onClick={this.flipCard}\r\n                                                >\r\n                                                    flip card\r\n                                                </button>\r\n                                            </h2>\r\n                                            <div className={styles.back}>\r\n                                                {cardStack[0].back}\r\n                                            </div>\r\n                                            <div className={styles.buttonContainer}>\r\n                                                <Button \r\n                                                    type='danger'\r\n                                                    onClick={_ => {\r\n                                                        this.flipCard()\r\n                                                        context.handleCard('hard', cardStack[0])\r\n                                                    }}\r\n                                                >\r\n                                                    hard\r\n                                                </Button>\r\n                                                <Button \r\n                                                    type='neutral'\r\n                                                    onClick={_ => {\r\n                                                        this.flipCard()\r\n                                                        context.handleCard('medium', cardStack[0])\r\n                                                    }}\r\n                                                >\r\n                                                    medium\r\n                                                </Button>\r\n                                                <Button \r\n                                                    type='primary'\r\n                                                    onClick={_ => {\r\n                                                        this.flipCard()\r\n                                                        context.handleCard('easy', cardStack[0])\r\n                                                    }}\r\n                                                >\r\n                                                    easy\r\n                                                </Button>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                </>\r\n                            ) : (\r\n                                <h2 className={styles.noCardsInfo}>no cards to learn in this deck</h2>\r\n                            )}\r\n                        </div>\r\n                        <ButtonContainer>\r\n                            <Button \r\n                                type='neutral'\r\n                                onClick={_ => context.closeModal(name)}\r\n                            >\r\n                                close\r\n                            </Button>\r\n                        </ButtonContainer>\r\n                    </>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nModalReview.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    deckId: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport default ModalReview","import React from 'react'\r\nimport styles from './InfoBar.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst InfoBar = ({children, type}) => (\r\n    <p className={styles[type]}>\r\n        {children}\r\n    </p>\r\n)\r\n\r\nInfoBar.propTypes = {\r\n    type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default InfoBar","import React from 'react'\r\nimport styles from './Checkbox.module.scss'\r\n\r\nclass Checkbox extends React.Component {\r\n    state = {\r\n        active: false\r\n    }\r\n\r\n    toggleActive(e) {\r\n        const bool = e.target.checked ? true : false\r\n\r\n        this.setState({\r\n            active: bool\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {name, labelText, changeFn, required} = this.props\r\n\r\n        return (\r\n            <label \r\n                className={styles[this.state.active ? 'labelDanger' : 'label']}\r\n            >\r\n                <input \r\n                    className={styles.checkbox}\r\n                    type='checkbox' \r\n                    name={name} \r\n                    onChange={e => {\r\n                        this.toggleActive(e)\r\n                        if(changeFn) changeFn(e)\r\n                    }}\r\n                    required={required}\r\n                />\r\n                {labelText}\r\n            </label>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Checkbox","import React from 'react'\r\nimport styles from './DeleteConfirmForm.module.scss'\r\nimport Button from '../Button/Button'\r\nimport ButtonContainer from './ButtonContainer'\r\nimport InfoBar from './InfoBar'\r\nimport Checkbox from './Checkbox'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DeleteConfirmForm = ({type, cancelFn, confirmFn, cardsCount}) => (\r\n    <>\r\n        <h3 className={styles.heading}>Delete {type}</h3>\r\n        <InfoBar type='danger'>\r\n            {type === 'card' ? (\r\n                'Deleted cards cannot be restored'\r\n            ) : (\r\n                `All cards (${cardsCount}) of this deck will be deleted too, are you sure to continue?`\r\n            )}\r\n        </InfoBar>\r\n        <form\r\n            onSubmit={e => {\r\n                e.preventDefault()\r\n                confirmFn()\r\n            }}\r\n        >\r\n            <Checkbox \r\n                labelText={`confirm delete ${type}`}\r\n                name='delete'\r\n                required={true}\r\n            />\r\n            <ButtonContainer>\r\n                <Button \r\n                    type='neutral'\r\n                    onClick={e => {\r\n                        e.preventDefault()\r\n                        cancelFn()\r\n                    }}\r\n                >\r\n                    close\r\n                </Button>  \r\n                <Button type='danger'>\r\n                    delete\r\n                </Button>  \r\n            </ButtonContainer>\r\n        </form>\r\n    </>\r\n)\r\n\r\nDeleteConfirmForm.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    cancelFn: PropTypes.func.isRequired,\r\n    confirmFn: PropTypes.func.isRequired,\r\n    cardsCount: PropTypes.number\r\n}\r\n\r\nexport default DeleteConfirmForm","import React from 'react';\r\nimport AppContext from '../../context'\r\nimport Button from '../Button/Button'\r\nimport styles from './ModalDeckDetails.module.scss'\r\nimport SelectDeck from './SelectDeck'\r\nimport ButtonContainer from './ButtonContainer';\r\nimport DeleteConfirmForm from './DeleteConfirmForm';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ModalDeckDetails extends React.Component {\r\n    state = {\r\n        showDeleteConfirmForm: false\r\n    }\r\n\r\n    scrollContainer = React.createRef()\r\n\r\n    componentDidMount = () => {\r\n        if(!this.props.showMore) this.setTableScroll()\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if(!this.props.showMore) this.setTableScroll()\r\n    }\r\n\r\n    setTableScroll = () => {\r\n        this.scrollContainer.current.scrollTop = this.props.scrollTop\r\n    }\r\n\r\n    nextReview = (days, getColor) => {\r\n        let text = ''\r\n        let classColor = ''\r\n\r\n        if (days <= 0) {\r\n            text = 'today'\r\n            classColor = 'reviewPrimary'\r\n        } else if (days === 1) {\r\n            text = 'tomorrow'\r\n            classColor = 'reviewPrimaryLight'\r\n        } else if (days > 1 && days < 8) {\r\n            text = 'in 7 days'\r\n            classColor = 'reviewPrimaryLighter'\r\n        } else if (days >= 8 && days < 30) {\r\n            text = 'in 30 days'\r\n            classColor = 'reviewPrimaryDeepLight'\r\n        } else if (days >= 30 && days < 90) {\r\n            text = 'in 3 months'\r\n            classColor = 'reviewPrimaryDeepLighter'\r\n        } else if (days >= 90 && days < 180) {\r\n            text = 'in 6 months'\r\n            classColor = 'reviewNeutral'\r\n        } else if (days >= 180 && days < 365) {\r\n            text = 'in 1 year'\r\n            classColor = 'reviewNeutralLight'\r\n        } else {\r\n            text = 'in far future'\r\n            classColor = 'reviewNeutralLighter'\r\n        }\r\n\r\n        return getColor ? classColor : text\r\n    }\r\n\r\n    showDeleteConfirmForm = bool => {\r\n        this.setState({\r\n            showDeleteConfirmForm: bool\r\n        })\r\n    }\r\n\r\n    getDeck = deck => deck.find(el => el.id === this.props.deckId)\r\n\r\n    render() {\r\n        const {showMore, name, deckId} = this.props\r\n        const {showDeleteConfirmForm} = this.state\r\n\r\n        return (\r\n            <AppContext.Consumer>\r\n                {context => (\r\n                    <>\r\n                        {showMore ? (\r\n                            <>\r\n                                {showDeleteConfirmForm ? (\r\n                                    <DeleteConfirmForm\r\n                                        type='deck'\r\n                                        cancelFn={() => this.showDeleteConfirmForm(false)}\r\n                                        cardsCount={context.card.filter(el => el.deckId === deckId).length}\r\n                                        confirmFn={() => {\r\n                                            this.showDeleteConfirmForm(false)\r\n                                            context.deleteDeck(deckId)\r\n                                        }}\r\n                                    >\r\n                                    </DeleteConfirmForm>\r\n                                ) : (\r\n                                    <>\r\n                                        <ButtonContainer type='bottomSpace'>\r\n                                            <Button \r\n                                                type='danger'\r\n                                                onClick={() => this.showDeleteConfirmForm(true)}\r\n                                            >\r\n                                                delete\r\n                                            </Button>\r\n                                            <Button \r\n                                                type='secondary'\r\n                                                onClick={() => {\r\n                                                    context.setModal({\r\n                                                        modal: 'updateDeckModal',\r\n                                                        key: 'deck',\r\n                                                        value: this.getDeck(context.deck)\r\n                                                    })\r\n                                                    context.showModal('updateDeckModal')\r\n                                                }}\r\n                                            >\r\n                                                edit\r\n                                            </Button>\r\n                                        </ButtonContainer>\r\n\r\n                                        <div className={styles.deckDescription}>\r\n                                            <h3 className={styles.deckDescriptionTitle}>\r\n                                                {this.getDeck(context.deck).name}\r\n                                            </h3>\r\n                                            <p className={styles.deckDescriptionContent}>\r\n                                                {this.getDeck(context.deck).description.length ? (\r\n                                                    this.getDeck(context.deck).description\r\n                                                ) : (\r\n                                                    '(no description)'\r\n                                                )}\r\n                                            </p>\r\n                                        </div>\r\n\r\n                                        <ButtonContainer>\r\n                                            <Button \r\n                                                type='neutral'\r\n                                                onClick={() => {\r\n                                                    context.setModal({\r\n                                                        modal: name,\r\n                                                        key: 'showMore',\r\n                                                        value: false\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                close\r\n                                            </Button>\r\n                                        </ButtonContainer>\r\n                                    </>\r\n                                )}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div className={styles.selectContainer}>\r\n                                    <SelectDeck \r\n                                        labelText='deck'\r\n                                        deckArray={context.deck}\r\n                                        defaultValue={deckId}\r\n                                        showAll={true}\r\n                                        onChangeFn={e => {\r\n                                            context.setModal({modal: name, key: 'scrollTop', value: 0})\r\n                                            context.setModal({\r\n                                                modal: name,\r\n                                                key: 'deckId',\r\n                                                value: Number(e.target.value) ? Number(e.target.value) : 0\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className={styles.countContainer}>\r\n                                    <div className={styles.countTitle}>cards</div>\r\n                                    <div className={styles.count}>\r\n                                        {deckId ? context.card.filter(el => el.deckId === deckId).length : \r\n                                        context.card.length}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {deckId ? (\r\n                                    <ButtonContainer type='bottomSpace'>\r\n                                        <Button \r\n                                            type='primaryLight'\r\n                                            onClick={() => {\r\n                                                context.setModal({\r\n                                                    modal: 'newCardModal',\r\n                                                    key: 'deckId',\r\n                                                    value: deckId\r\n                                                })\r\n                                                context.showModal('newCardModal')\r\n                                            }}\r\n                                        >\r\n                                            new card\r\n                                        </Button>\r\n                                        <Button \r\n                                            type='secondary'\r\n                                            onClick={() => {\r\n                                                context.setModal({\r\n                                                    modal: name,\r\n                                                    key: 'showMore',\r\n                                                    value: true\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            more\r\n                                        </Button>\r\n                                        \r\n                                    </ButtonContainer>\r\n                                ) : ''}\r\n\r\n                                <div \r\n                                    className={styles.tableContainer} \r\n                                    ref={this.scrollContainer}\r\n                                >\r\n                                    <table className={styles.table}>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th className={styles.tableQuestionTitle}>Question (front)</th>\r\n                                                <th className={styles.tableReviewTitle}>Next review</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {context.card\r\n                                            .filter(el => !deckId ? el : el.deckId === deckId)\r\n                                            .map((item, index) => (\r\n                                                <tr key={index}>\r\n                                                    <td className={styles.tableQuestion}>\r\n                                                        <Button\r\n                                                            type='neutralLight'\r\n                                                            onClick={() => {\r\n                                                                context.setModal({\r\n                                                                    modal: name,\r\n                                                                    key: 'scrollTop',\r\n                                                                    value: this.scrollContainer.current.scrollTop\r\n                                                                })\r\n                                                                context.setModal({\r\n                                                                    modal: 'updateCardModal',\r\n                                                                    key: 'card',\r\n                                                                    value: item\r\n                                                                })\r\n                                                                context.showModal('updateCardModal')\r\n                                                            }}\r\n                                                        >\r\n                                                            {item.front}\r\n                                                        </Button>\r\n                                                    </td>\r\n                                                    <td \r\n                                                        className={\r\n                                                            styles[this.nextReview(context.nextReviewInDays(item.nextReview), true)]\r\n                                                        }\r\n                                                    >\r\n                                                        {this.nextReview(context.nextReviewInDays(item.nextReview), false)}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                                <ButtonContainer>\r\n                                    <Button \r\n                                        type='neutral'\r\n                                        onClick={() => {\r\n                                            context.setModal({modal: name, key: 'scrollTop', value: 0})\r\n                                            context.closeModal(name)\r\n                                        }}\r\n                                    >\r\n                                        close\r\n                                    </Button>\r\n\r\n                                    <Button \r\n                                        type='primary'\r\n                                        onClick={() => context.startReview(deckId)}\r\n                                    >\r\n                                        review\r\n                                    </Button>\r\n                                </ButtonContainer>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nModalDeckDetails.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    showMore: PropTypes.bool.isRequired,\r\n    deckId: PropTypes.number.isRequired\r\n}\r\n\r\nexport default ModalDeckDetails","import React from 'react';\r\nimport styles from './Input.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Input = ({children, type, ...props}) => (\r\n    <>\r\n        {type === 'textarea' ? (\r\n            <textarea\r\n                {...props}           \r\n                className={styles[type]}\r\n            >\r\n                {children}\r\n            </textarea>\r\n        ) : (\r\n            <input\r\n                {...props}\r\n                className={styles[type]}\r\n            />\r\n        )}\r\n    </>\r\n)\r\n\r\nInput.propTypes = {\r\n    type: PropTypes.string\r\n}\r\n\r\nInput.defaultProps = {\r\n    type: 'input'\r\n}\r\n\r\nexport default Input","import React from 'react';\r\nimport AppContext from '../../context'\r\nimport Input from './Input'\r\nimport Button from '../Button/Button'\r\nimport styles from './ModalNewCard.module.scss'\r\nimport InfoBar from './InfoBar'\r\nimport SelectDeck from './SelectDeck'\r\nimport ButtonContainer from './ButtonContainer';\r\nimport DeleteConfirmForm from './DeleteConfirmForm';\r\nimport Checkbox from './Checkbox';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ModalNewCard extends React.Component {\r\n    state = {\r\n        deckId: this.props.card ? this.props.card.deckId : \r\n                this.props.deckId ? this.props.deckId : false,\r\n        front: this.props.card ? this.props.card.front : '',\r\n        back: this.props.card ? this.props.card.back : '',\r\n        id: this.props.card ? this.props.card.id : '',\r\n        reset: false,\r\n        count: 0,\r\n        showDeleteConfirmForm: false,\r\n    }\r\n\r\n    updateValue = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    resetForm = () => {\r\n        this.setState({\r\n            front: '',\r\n            back: ''\r\n        })\r\n    }\r\n\r\n    countNewCards = () => {\r\n        this.setState(prevState => ({\r\n            count: prevState.count + 1\r\n        }))\r\n    }\r\n\r\n    resetProgress = e => {\r\n        const reset = e.target.checked ? true : false\r\n\r\n        this.setState({\r\n            reset: reset\r\n        })\r\n    }\r\n\r\n    showDeleteConfirmForm = bool => {\r\n        this.setState({\r\n            showDeleteConfirmForm: bool\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {front, back, count, deckId, id, showDeleteConfirmForm} = this.state\r\n        const {name} = this.props\r\n\r\n        return (\r\n            <AppContext.Consumer>\r\n                {context => (\r\n                    <>\r\n                        {showDeleteConfirmForm ? (\r\n                            <DeleteConfirmForm\r\n                                type='card'\r\n                                cancelFn={() => this.showDeleteConfirmForm(false)}\r\n                                confirmFn={() => {\r\n                                    context.deleteCard(id)\r\n                                    context.closeModal(name)\r\n                                }}\r\n                            >\r\n                            </DeleteConfirmForm>\r\n                        ) : !context.deck.length ? (\r\n                            <>\r\n                                <InfoBar type='danger'>\r\n                                    you have no decks, create one before you add new card\r\n                                </InfoBar>\r\n                                <ButtonContainer>\r\n                                    <Button \r\n                                        type='neutral'\r\n                                        onClick={() => context.closeModal(name)}\r\n                                    >\r\n                                        close\r\n                                    </Button>\r\n                                </ButtonContainer>\r\n                            </>\r\n                        ) : (\r\n                            <form \r\n                                className={styles.form}\r\n                                action=\"\"\r\n                                onSubmit={e => {\r\n                                    e.preventDefault()\r\n                                    if(name === 'updateCardModal') {\r\n                                        context.updateCard(this.state)\r\n                                        context.closeModal(name)\r\n                                    }\r\n                                    else {\r\n                                        context.createCard(this.state)\r\n                                        this.countNewCards()\r\n                                        this.resetForm()\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {count ? (\r\n                                    <InfoBar type='primary'>\r\n                                        new card created ({count})\r\n                                    </InfoBar>\r\n                                ) : ''}\r\n\r\n                                <div className={styles.selectContainer}>\r\n                                    <SelectDeck \r\n                                        labelText={name === 'updateCardModal' ? 'change deck' : 'choose deck'}\r\n                                        deckArray={context.deck} \r\n                                        defaultValue={deckId ? deckId : 'select deck'}\r\n                                        onChangeFn={this.updateValue}\r\n                                    />\r\n                                </div>\r\n\r\n                                {name === 'updateCardModal' ? (\r\n                                    <ButtonContainer type='bottomSpace'>\r\n                                        <Button \r\n                                            type='danger'\r\n                                            onClick={e => {\r\n                                                e.preventDefault()\r\n                                                this.showDeleteConfirmForm(true)\r\n                                            }}\r\n                                        >\r\n                                            delete\r\n                                        </Button>\r\n                                    </ButtonContainer>\r\n                                ) : ''}\r\n\r\n                                <Input \r\n                                    type='textarea'\r\n                                    name='front'\r\n                                    placeholder='question (front)'\r\n                                    required\r\n                                    value={front}\r\n                                    onChange={this.updateValue}\r\n                                />\r\n                                <Input \r\n                                    type='textarea'\r\n                                    name='back'\r\n                                    placeholder='answer (back)'\r\n                                    required\r\n                                    value={back}\r\n                                    onChange={this.updateValue}\r\n                                />\r\n\r\n                                {name === 'updateCardModal' ? (\r\n                                    <Checkbox \r\n                                        labelText='reset progress'\r\n                                        changeFn={this.resetProgress}\r\n                                        name='reset'\r\n                                        required={false}\r\n                                    />\r\n                                ) : ''}\r\n                                \r\n                                <ButtonContainer>\r\n                                    <Button \r\n                                        type='neutral'\r\n                                        onClick={e => {\r\n                                            e.preventDefault()\r\n                                            context.closeModal(name)\r\n                                        }}\r\n                                    >\r\n                                        close\r\n                                    </Button>\r\n                                    <Button type='primary'>\r\n                                        {name === 'updateCardModal' ? 'save' : 'add'}\r\n                                    </Button>\r\n                                </ButtonContainer>\r\n                            </form>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nModalNewCard.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ModalNewCard","import React from 'react';\r\nimport AppContext from '../../context'\r\nimport Input from './Input'\r\nimport Button from '../Button/Button'\r\nimport styles from './ModalNewDeck.module.scss'\r\nimport ButtonContainer from './ButtonContainer';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ModalNewDeck extends React.Component {\r\n    state = {\r\n        deckName: this.props.deck ? this.props.deck.name : '',\r\n        description: this.props.deck ? this.props.deck.description : '',\r\n        id: this.props.deck ? this.props.deck.id : false\r\n    }\r\n\r\n    updateValue = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {deckName, description} = this.state\r\n        const {name} = this.props\r\n\r\n        return (\r\n            <AppContext.Consumer>\r\n                {context => (\r\n                    <form \r\n                        className={styles.form}\r\n                        action=\"\"\r\n                        onSubmit={e => {\r\n                            e.preventDefault()\r\n                            if(name === 'newDeckModal') {\r\n                                context.createDeck(this.state)\r\n                            }\r\n                            else {\r\n                                context.updateDeck(this.state)\r\n                            }\r\n                            context.closeModal(name)\r\n                        }}\r\n                    >\r\n                        <Input \r\n                            name='deckName'\r\n                            placeholder='deck name'\r\n                            required\r\n                            value={deckName}\r\n                            onChange={this.updateValue}\r\n                        />\r\n                        <Input \r\n                            type='textarea'\r\n                            name='description'\r\n                            placeholder='description (optional)'\r\n                            value={description}\r\n                            onChange={this.updateValue}\r\n                        />\r\n                        <ButtonContainer>\r\n                            <Button \r\n                                type='neutral'\r\n                                onClick={e => {\r\n                                    e.preventDefault()\r\n                                    context.closeModal(name)\r\n                                }}\r\n                            >\r\n                                close\r\n                            </Button>\r\n                            <Button type='primary'>\r\n                                {name === 'updateDeckModal' ? 'save' : 'add'}\r\n                            </Button>\r\n                        </ButtonContainer>\r\n                    </form>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nModalNewDeck.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ModalNewDeck","import React from 'react';\r\nimport AppContext from '../../context'\r\nimport ButtonContainer from './ButtonContainer'\r\nimport Button from '../Button/Button'\r\nimport styles from './ModalAbout.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ModalAbout = ({name}) => (\r\n    <AppContext.Consumer>\r\n        {context => (\r\n            <>\r\n                <div className={styles.aboutContainer}>\r\n                    <p>This web app is using local storage to store cards and decks (nothing more).</p>\r\n                    <p>I created this app to practice <a href='https://reactjs.org/'>react</a>.</p>\r\n                    <p>\r\n                        Check out my github \r\n                        <a href='https://github.com/slavcoder/flashcards'>repository</a> \r\n                        if you like\r\n                    </p>\r\n                    <p><a href='https://github.com/slavcoder'>slavcoder</a></p>\r\n                </div>\r\n                <ButtonContainer>\r\n                    <Button \r\n                        type='neutral'\r\n                        onClick={_ => context.closeModal(name)}\r\n                    >\r\n                        close\r\n                    </Button>\r\n                </ButtonContainer>\r\n            </>\r\n        )}\r\n    </AppContext.Consumer>\r\n)\r\n\r\nModalAbout.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ModalAbout","import React from \"react\";\r\nimport styles from \"./Modal.module.scss\";\r\nimport PropTypes from 'prop-types'\r\nimport ModalReview from './ModalReview'\r\nimport ModalDeckDetails from './ModalDeckDetails'\r\nimport ModalNewCard from './ModalNewCard'\r\nimport ModalNewDeck from './ModalNewDeck'\r\nimport ModalAbout from './ModalAbout'\r\n\r\nconst Modal = ({title, name, ...props}) => {\r\n    const primaryModals = ['reviewModal', 'newCardModal', 'updateCardModal']\r\n    const titleClass = primaryModals.includes(name) ? 'titlePrimary' : 'titleSecondary'\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.modal}>\r\n                <h2  className={styles[titleClass]}>\r\n                    {title}\r\n                </h2>\r\n                \r\n                <div className={styles.box}>\r\n                    {name === 'reviewModal' ? (\r\n                        <ModalReview name={name} {...props} />\r\n                    ) : name === 'deckDetailsModal' ? (\r\n                        <ModalDeckDetails name={name} {...props} />\r\n                    ) : name === 'newCardModal' || name === 'updateCardModal' ? (\r\n                        <ModalNewCard name={name} {...props} />\r\n                    ) : name === 'newDeckModal' || name === 'updateDeckModal' ? (\r\n                        <ModalNewDeck name={name} {...props} />\r\n                    ) : name === 'aboutModal' ? (\r\n                        <ModalAbout name={name} {...props} />\r\n                    ) : ''}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Modal;","import React from 'react'\r\nimport styles from './Footer.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Footer = ({testMode, toggleTestModeFn, showAboutFn}) => (\r\n    <footer className={styles.footer}>\r\n        <a\r\n            href='https://github.com/slavcoder'\r\n            className={styles.link}\r\n        >\r\n            &copy; slavcoder\r\n        </a>\r\n        <button\r\n            onClick={toggleTestModeFn}\r\n            className={styles[testMode ? 'testButtonActive' : 'testButton']}\r\n        >\r\n            {testMode ? 'stop test mode' : 'test mode'}\r\n        </button>\r\n        <button\r\n            onClick={showAboutFn}\r\n            className={styles.aboutButton}\r\n        >\r\n            about\r\n        </button>\r\n    </footer>\r\n)\r\n\r\nFooter.propTypes = {\r\n    testMode: PropTypes.bool.isRequired,\r\n    toggleTestModeFn: PropTypes.func.isRequired,\r\n    showAboutFn: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport Button from '../Button/Button'\r\nimport styles from './TestMode.module.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TestMode = ({testCardsFn, testDeckFn, toggleTestModeFn}) => (\r\n    <>\r\n        <p className={styles.bar}>\r\n            test mode\r\n            <button\r\n                onClick={toggleTestModeFn}\r\n                className={styles.barButton}\r\n            >\r\n                stop\r\n            </button> \r\n        </p>\r\n        <h2 className={styles.heading}>Test mode actions</h2>\r\n        <div className={styles.testModeInfoBox}>\r\n            <Button\r\n                type='primary'\r\n                onClick={() => testCardsFn(20)}\r\n            >\r\n                add 20 test cards\r\n            </Button>\r\n            <Button\r\n                type='secondary'\r\n                onClick={() => testDeckFn()}\r\n            >\r\n                add test deck\r\n            </Button>\r\n            \r\n            <p>In test mode you can add some random data to see how this app works when you have more cards or decks before you spend time to create them by your own</p>\r\n            <p>Any cards and decks created or modified under test mode are temporary changes (not saved). You can experiment: add/delete/edit cards and decks, reset card progress etc.</p>\r\n            <p>You need at least one deck before you can add cards.</p>\r\n            <p>To stop test mode, click again on button in footer or bottom bar. You can also just refresh the page.</p>\r\n        </div>\r\n    </>\r\n)\r\n\r\nTestMode.propTypes = {\r\n    testCardsFn: PropTypes.func.isRequired, \r\n    testDeckFn: PropTypes.func.isRequired, \r\n    toggleTestModeFn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TestMode","const modals = {\r\n    reviewModal: {\r\n        open: false,\r\n        name: 'reviewModal',\r\n        title: 'review mode',\r\n        deckId: 0,\r\n        card: []\r\n    },\r\n    newCardModal: {\r\n        open: false,\r\n        name: 'newCardModal',\r\n        title: 'new card',\r\n        deckId: false\r\n    },\r\n    updateCardModal: {\r\n        open: false,\r\n        name: 'updateCardModal',\r\n        title: 'update card',\r\n        card: false\r\n    },\r\n    newDeckModal: {\r\n        open: false,\r\n        name: 'newDeckModal',\r\n        title: 'new deck'\r\n    },\r\n    updateDeckModal: {\r\n        open: false,\r\n        name: 'updateDeckModal',\r\n        title: 'update deck',\r\n        deck: false\r\n    },\r\n    deckDetailsModal: {\r\n        open: false,\r\n        name: 'deckDetailsModal',\r\n        title: 'deck details',\r\n        deckId: 0,\r\n        showMore: false,\r\n        scrollTop: 0\r\n    },\r\n    aboutModal: {\r\n        open: false,\r\n        name: 'aboutModal',\r\n        title: 'About'\r\n    }\r\n}\r\n\r\nexport default modals","const testText = 'Duis suscipit tortor a libero luctus, ut interdum risus cursus. Proin pellentesque ultricies augue vitae viverra. Fusce sapien purus, fermentum vel nulla sit amet, feugiat pulvinar arcu. Duis non enim sed sapien dignissim vulputate id dignissim leo. Fusce ut justo at neque iaculis gravida. Morbi scelerisque lacus a lacinia dictum. Mauris rutrum, neque sit amet dignissim sodales, nisi mi iaculis orci, posuere porta magna eros viverra nisl. Suspendisse augue metus, faucibus eu congue ut, suscipit ut tellus. Sed mauris ex, venenatis vel tincidunt ullamcorper, viverra vel diam. In vitae dolor justo. Phasellus vitae lobortis nisi. Morbi convallis dui eu lorem ultricies posuere. Ut rutrum justo id leo tristique, in sollicitudin lectus molestie. Nam eget elementum mi. In volutpat arcu faucibus neque tempus eleifend. Vestibulum hendrerit ultricies nunc non vulputate. Mauris sit amet tincidunt nisi. Praesent laoreet orci in libero aliquet, sit amet aliquam urna laoreet. Nam imperdiet blandit tortor, sed varius dolor pellentesque vitae. Proin laoreet magna et enim varius scelerisque. Ut ut elit quis justo fermentum faucibus. Nam faucibus sapien augue, at dictum purus condimentum sodales. Mauris aliquam felis justo, nec consequat sapien porta aliquet. Duis ipsum erat, iaculis vitae neque at, mollis sagittis justo. Quisque efficitur molestie magna scelerisque porttitor. Praesent dignissim justo quis massa gravida, in pharetra nisi fermentum. Suspendisse non dictum libero, eu porta mauris.'\r\n\r\nexport { testText }","const data = {\r\n    get: (name) => {\r\n        const data = localStorage.getItem(name)\r\n        return data !== null ? JSON.parse(data) : []\r\n    },\r\n    set: (name, data) => {\r\n        localStorage.setItem(name, JSON.stringify(data))\r\n    }\r\n}\r\n\r\nexport default data","import React from \"react\";\r\nimport styles from \"./App.module.scss\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Button from \"./components/Button/Button\";\r\nimport Table from \"./components/Table/Table\";\r\nimport Modal from \"./components/Modal/Modal\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport TestMode from \"./components/TestMode/TestMode\";\r\nimport AppContext from './context';\r\nimport modals from './data/modals'\r\nimport { testText } from './data/testData'\r\nimport data from './data/data'\r\n\r\nconst deck = data.get('deck')\r\nconst card = data.get('card')\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        deck: deck,\r\n        card: card,\r\n        testMode: false,\r\n        ...modals\r\n    }\r\n\r\n    setModal = ({modal, key, value}) => {\r\n        this.setState(prevState => ({\r\n            [modal]: {\r\n                ...prevState[modal],\r\n                [key]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    showModal = modal => this.setModal({modal: modal, key: 'open', value: true})\r\n    closeModal = modal => this.setModal({modal: modal, key: 'open', value: false})\r\n\r\n    showDeckDetails = (deckId) => {\r\n        this.setState(prevState => ({\r\n            deckDetailsModal: {\r\n                ...prevState.deckDetailsModal,\r\n                open: true,\r\n                deckId: deckId\r\n            }\r\n        }))\r\n    }\r\n\r\n    createCard = ({deckId, front, back}) => {\r\n        const today = new Date()\r\n\r\n        this.setState(prevState => ({\r\n            card: [\r\n                ...prevState.card, \r\n                {\r\n                    id: prevState.card.length ? prevState.card[prevState.card.length-1].id + 1 : 1,\r\n                    deckId: Number(deckId),\r\n                    front: front,\r\n                    back: back,\r\n                    nextReview: today.toISOString(),\r\n                    knowledgeLevel: 0\r\n                }\r\n            ]\r\n        }), () => this.saveChanges('card'))\r\n    }\r\n\r\n    createDeck = ({deckName, description}) => {\r\n        this.setState(prevState => ({\r\n            deck: [\r\n                ...prevState.deck, \r\n                {\r\n                    id: prevState.deck.length ? prevState.deck[prevState.deck.length-1].id + 1 : 1,\r\n                    name: deckName,\r\n                    description: description\r\n                }\r\n            ]\r\n        }), () => this.saveChanges('deck'))\r\n    }\r\n    \r\n    updateCard = ({id, deckId, front, back, reset}) => {\r\n        if(!deckId) return\r\n        let today = new Date()\r\n\r\n        this.setState(prevState => ({\r\n            card: prevState.card.map(el => el.id === id ? {\r\n                ...el,\r\n                deckId: Number(deckId),\r\n                front: front,\r\n                back: back,\r\n                nextReview: reset ? today.toISOString() : el.nextReview,\r\n                knowledgeLevel: reset ? 0 : el.knowledgeLevel\r\n            } : el)\r\n        }), () => this.saveChanges('card'))\r\n\r\n    }\r\n\r\n    updateDeck = ({deckName, description, id}) => {\r\n        if(!id) return\r\n\r\n        this.setState(prevState => ({\r\n            deck: prevState.deck.map(el => el.id === id ? {\r\n                ...el,\r\n                name: deckName,\r\n                description: description\r\n            }: el)\r\n        }), () => this.saveChanges('deck'))\r\n    }\r\n\r\n    startReview = (deckId) => {\r\n        const allCards = this.state.card.filter(el => !deckId ? el : el.deckId === deckId)\r\n        const cardsToLearn = allCards.filter(el => this.nextReviewInDays(el.nextReview) <= 0)\r\n        cardsToLearn.forEach(el => el.hardCount = 1)\r\n        \r\n        this.setState(prevState => ({\r\n            reviewModal: {\r\n                ...prevState.reviewModal,\r\n                deckId: deckId,\r\n                open: true,\r\n                card: cardsToLearn\r\n            }\r\n        }))\r\n    }\r\n\r\n    handleCard = (level, card) => {\r\n        // level: hard/medium/easy\r\n        const cardDeck = [...this.state.reviewModal.card]\r\n        cardDeck.shift()\r\n\r\n        if(level === 'hard') {\r\n            card.hardCount++\r\n            cardDeck.push(card)\r\n            this.setModal({modal: 'reviewModal', key: 'card', value: cardDeck})\r\n        } else {\r\n            let knowledgeLevel = card.knowledgeLevel\r\n            let days\r\n            const today = new Date()\r\n\r\n            if(level === 'medium') {\r\n                days = card.knowledgeLevel === 0 ? 2 :\r\n                       card.knowledgeLevel === 1 ? Math.random() * 3 + 1 :\r\n                       card.knowledgeLevel === 2 ? Math.random() * 7 + 3 :\r\n                       Math.random() * 5 + 10\r\n            } else {\r\n                knowledgeLevel++\r\n                days = card.knowledgeLevel === 0 ? 2 :\r\n                         card.knowledgeLevel === 1 ? Math.random() * 5  + 5   :\r\n                         card.knowledgeLevel === 2 ? Math.random() * 10 + 25  :\r\n                         card.knowledgeLevel === 3 ? Math.random() * 20 + 80  :\r\n                         card.knowledgeLevel === 4 ? Math.random() * 30 + 340 :\r\n                         Math.random() * 365 + 365\r\n            }\r\n\r\n            const miliseconds = Math.floor(Math.max(days / card.hardCount, 2) * 24 * 60 * 60 * 1000)\r\n            const nextReview = new Date(today.getTime() + miliseconds)\r\n\r\n            this.setState(prevState => ({\r\n                card: prevState.card.map(el => el.id === card.id ? {\r\n                    ...el,\r\n                    nextReview: nextReview.toISOString(),\r\n                    knowledgeLevel: knowledgeLevel,\r\n                } : el),\r\n                reviewModal: {\r\n                    ...prevState.reviewModal,\r\n                    card: cardDeck\r\n                }\r\n            }), () => this.saveChanges('card'))\r\n        }\r\n    }\r\n\r\n    nextReviewInDays = cardNextReview => {\r\n        const today = new Date()\r\n        const cardReviewDate = new Date(cardNextReview)\r\n        const daysDiff = Math.floor((cardReviewDate - today) / (1000*60*60*24))\r\n        return daysDiff\r\n    }\r\n\r\n    deleteCard = id => {\r\n        this.setState(prevState => ({\r\n            card: prevState.card.filter(el => el.id !== id)\r\n        }), () => this.saveChanges('card'))\r\n    }\r\n\r\n    deleteDeck = deckId => {\r\n        this.setState(prevState => ({\r\n            deck: prevState.deck.filter(el => el.id !== deckId),\r\n            card: prevState.card.filter(el => el.deckId !== deckId),\r\n            deckDetailsModal: {\r\n                ...prevState.deckDetailsModal,\r\n                scrollTop: 0,\r\n                showMore: false,\r\n                deckId: 0\r\n            }\r\n        }), () => {\r\n            this.saveChanges('deck')\r\n            this.saveChanges('card')\r\n        })\r\n    }\r\n\r\n    testCards = amount => {\r\n        if(!this.state.deck.length) return\r\n        const newCards = []\r\n        const startId = this.state.card.length ? this.state.card[this.state.card.length-1].id : 1\r\n        const deckIdArr = this.state.deck.map(el => el.id)\r\n        const deckIdArrLength = deckIdArr.length\r\n        const textArr = testText.split('. ').filter(el => el.trim().length)\r\n        const textArrLength = textArr.length\r\n        const random = n => Math.random() * n\r\n\r\n        for(let i = 1; i <= amount; i++) {\r\n            const year = `202${Math.floor(random(2))}`\r\n            const month = Math.floor((random(12))+1)\r\n            const day = Math.floor((random(28))+1)\r\n\r\n            newCards.push({\r\n                id: startId+i,\r\n                deckId: deckIdArr[Math.floor(random(deckIdArrLength))],\r\n                front: textArr[Math.floor(random(textArrLength))],\r\n                back: textArr[Math.floor(random(textArrLength))],\r\n                nextReview: `${year}-${month}-${day}`,\r\n                knowledgeLevel: Math.floor(random(5))\r\n            })\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            card: [\r\n                ...prevState.card,\r\n                ...newCards\r\n            ]\r\n        }), () => this.saveChanges('card'))\r\n    }\r\n\r\n    testDeck = () => {\r\n        const textArr = testText.split('. ').filter(el => el.trim().length)\r\n        const description = textArr[Math.floor(Math.random() * textArr.length)]\r\n        const deckName = description.split(' ')[0]\r\n\r\n        this.setState(prevState => ({\r\n            deck: [\r\n                ...prevState.deck, \r\n                {\r\n                    id: prevState.deck.length ? prevState.deck[prevState.deck.length-1].id + 1 : 1,\r\n                    name: deckName,\r\n                    description: description\r\n                }\r\n            ]\r\n        }), () => this.saveChanges('deck'))\r\n    }\r\n\r\n    toggleTestMode = () => {\r\n        this.setState(prevState => ({\r\n            testMode: !prevState.testMode\r\n        }), () => {\r\n            if(!this.state.testMode) {\r\n                this.closeModal('reviewModal')\r\n                this.closeModal('newCardModal')\r\n                this.closeModal('updateCardModal')\r\n                this.closeModal('newDeckModal')\r\n                this.closeModal('updateDeckModal')\r\n                this.closeModal('deckDetailsModal')\r\n                this.loadLastSave()\r\n            }\r\n        })\r\n    }\r\n\r\n    saveChanges = name => {\r\n        if(!this.state.testMode) {\r\n            data.set(name, [...this.state[name]])\r\n        }\r\n    }\r\n\r\n    loadLastSave = () => {\r\n        this.setState({\r\n            card: data.get('card'),\r\n            deck: data.get('deck'),\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const contextElement = {\r\n            showModal: this.showModal,\r\n            closeModal: this.closeModal,\r\n            createCard: this.createCard,\r\n            updateCard: this.updateCard,\r\n            createDeck: this.createDeck,\r\n            updateDeck: this.updateDeck,\r\n            setModal: this.setModal,\r\n            nextReviewInDays: this.nextReviewInDays,\r\n            deleteCard: this.deleteCard,\r\n            deleteDeck: this.deleteDeck,\r\n            startReview: this.startReview,\r\n            handleCard: this.handleCard,\r\n            showDeckDetails: this.showDeckDetails,\r\n            ...this.state\r\n        }\r\n\r\n        const allModals = [\r\n            this.state.reviewModal,\r\n            this.state.newCardModal,\r\n            this.state.updateCardModal,\r\n            this.state.newDeckModal,\r\n            this.state.updateDeckModal,\r\n            this.state.deckDetailsModal,\r\n            this.state.aboutModal,\r\n        ]\r\n\r\n        const {testMode} = this.state\r\n        const openModal = allModals.find(el => el.open)\r\n\r\n        return (\r\n            <AppContext.Provider value={contextElement}>\r\n                <Header />\r\n                <main className={styles.main}>\r\n                    <div className={styles.buttonsContainer}>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => {\r\n                                this.setModal({modal: 'newCardModal', key: 'deckId', value: false})\r\n                                this.showModal('newCardModal')\r\n                            }}\r\n                        >\r\n                            new card\r\n                        </Button>\r\n                        <Button\r\n                            type='secondary'\r\n                            onClick={() => this.showModal('newDeckModal')}\r\n                        >\r\n                            new deck\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                    <Table />\r\n                    {openModal && <Modal {...openModal} />}\r\n                    {testMode && (\r\n                        <TestMode \r\n                            testCardsFn={this.testCards}\r\n                            testDeckFn={this.testDeck}\r\n                            toggleTestModeFn={this.toggleTestMode}\r\n                        />\r\n                    )}\r\n                </main>\r\n                <Footer \r\n                    testMode={testMode}\r\n                    toggleTestModeFn={this.toggleTestMode}\r\n                    showAboutFn={() => this.showModal('aboutModal')}\r\n                />\r\n            </AppContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// serviceWorker.unregister();"],"sourceRoot":""}